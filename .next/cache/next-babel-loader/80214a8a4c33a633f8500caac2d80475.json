{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/esm/slicedToArray\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/esm/toConsumableArray\"));\n\nvar _map = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/map\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/esm/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/esm/createClass\"));\n\nvar _defineProperty = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/object/define-property\"));\n\n(0, _defineProperty[\"default\"])(exports, \"__esModule\", {\n  value: true\n});\n\nvar UrlNode =\n/*#__PURE__*/\nfunction () {\n  function UrlNode() {\n    (0, _classCallCheck2[\"default\"])(this, UrlNode);\n    this.placeholder = true;\n    this.children = new _map[\"default\"]();\n    this.slugName = null;\n  }\n\n  (0, _createClass2[\"default\"])(UrlNode, [{\n    key: \"insert\",\n    value: function insert(urlPath) {\n      this._insert(urlPath.split('/').filter(Boolean));\n    }\n  }, {\n    key: \"smoosh\",\n    value: function smoosh() {\n      return this._smoosh();\n    }\n  }, {\n    key: \"_smoosh\",\n    value: function _smoosh() {\n      var _this = this;\n\n      var prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '/';\n      var childrenPaths = (0, _toConsumableArray2[\"default\"])(this.children.keys()).sort();\n\n      if (this.hasSlug) {\n        childrenPaths.splice(childrenPaths.indexOf('[]'), 1);\n      }\n\n      var routes = childrenPaths.map(function (c) {\n        return _this.children.get(c)._smoosh(\"\".concat(prefix).concat(c, \"/\"));\n      }).reduce(function (prev, curr) {\n        return [].concat((0, _toConsumableArray2[\"default\"])(prev), (0, _toConsumableArray2[\"default\"])(curr));\n      }, []);\n\n      if (this.hasSlug) {\n        routes.push.apply(routes, (0, _toConsumableArray2[\"default\"])(this.children.get('[]')._smoosh(\"\".concat(prefix, \"[\").concat(this.slugName, \"]/\"))));\n      }\n\n      if (!this.placeholder) {\n        routes.unshift(prefix === '/' ? '/' : prefix.slice(0, -1));\n      }\n\n      return routes;\n    }\n  }, {\n    key: \"_insert\",\n    value: function _insert(urlPaths) {\n      if (urlPaths.length === 0) {\n        this.placeholder = false;\n        return;\n      }\n\n      var _urlPaths = (0, _slicedToArray2[\"default\"])(urlPaths, 1),\n          nextSegment = _urlPaths[0];\n\n      if (nextSegment.startsWith('[') && nextSegment.endsWith(']')) {\n        var slugName = nextSegment.slice(1, -1);\n\n        if (this.hasSlug && slugName !== this.slugName) {\n          throw new Error('You cannot use different slug names for the same dynamic path.');\n        }\n\n        this.slugName = slugName;\n        nextSegment = '[]';\n      }\n\n      if (!this.children.has(nextSegment)) {\n        this.children.set(nextSegment, new UrlNode());\n      }\n\n      this.children.get(nextSegment)._insert(urlPaths.slice(1));\n    }\n  }, {\n    key: \"hasSlug\",\n    get: function get() {\n      return this.slugName != null;\n    }\n  }]);\n  return UrlNode;\n}();\n\nfunction getSortedRoutes(normalizedPages) {\n  var root = new UrlNode();\n  normalizedPages.forEach(function (page) {\n    return root.insert(page);\n  });\n  return root.smoosh();\n}\n\nexports.getSortedRoutes = getSortedRoutes;","map":null,"metadata":{},"sourceType":"script"}